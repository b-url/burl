// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ErrorCode.
const (
	ParameterInvalid      ErrorCode = "parameter_invalid"
	ParameterMissing      ErrorCode = "parameter_missing"
	ProcessingError       ErrorCode = "processing_error"
	ResourceAlreadyExists ErrorCode = "resource_already_exists"
	ResourceMissing       ErrorCode = "resource_missing"
)

// Defines values for ErrorType.
const (
	ApiError            ErrorType = "api_error"
	InvalidRequestError ErrorType = "invalid_request_error"
)

// Bookmark Bookmark is a resource that represents a saved URL.
type Bookmark struct {
	CreateTime  *time.Time `json:"createTime,omitempty"`
	DisplayName *string    `json:"displayName,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Tags        []string   `json:"tags"`
	Uid         *string    `json:"uid,omitempty"`
	UpdateTime  *time.Time `json:"updateTime,omitempty"`
	Url         string     `json:"url"`
}

// BookmarkCreate Resource create operation model.
type BookmarkCreate struct {
	DisplayName *string  `json:"displayName,omitempty"`
	Tags        []string `json:"tags"`
	Url         string   `json:"url"`
}

// Error Error is the response model when an API call is unsuccessful.
type Error struct {
	Code    ErrorCode              `json:"code"`
	Details map[string]interface{} `json:"details"`
	Message string                 `json:"message"`
	Type    ErrorType              `json:"type"`
}

// ErrorCode defines model for ErrorCode.
type ErrorCode string

// ErrorType defines model for ErrorType.
type ErrorType string

// BookmarkParentKeyCollectionId defines model for BookmarkParentKey.collectionId.
type BookmarkParentKeyCollectionId = string

// BookmarkParentKeyUserId defines model for BookmarkParentKey.userId.
type BookmarkParentKeyUserId = string

// BookmarksCreateJSONRequestBody defines body for BookmarksCreate for application/json ContentType.
type BookmarksCreateJSONRequestBody = BookmarkCreate

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BookmarksCreateWithBody request with any body
	BookmarksCreateWithBody(ctx context.Context, userId BookmarkParentKeyUserId, collectionId BookmarkParentKeyCollectionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BookmarksCreate(ctx context.Context, userId BookmarkParentKeyUserId, collectionId BookmarkParentKeyCollectionId, body BookmarksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BookmarksCreateWithBody(ctx context.Context, userId BookmarkParentKeyUserId, collectionId BookmarkParentKeyCollectionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBookmarksCreateRequestWithBody(c.Server, userId, collectionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BookmarksCreate(ctx context.Context, userId BookmarkParentKeyUserId, collectionId BookmarkParentKeyCollectionId, body BookmarksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBookmarksCreateRequest(c.Server, userId, collectionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBookmarksCreateRequest calls the generic BookmarksCreate builder with application/json body
func NewBookmarksCreateRequest(server string, userId BookmarkParentKeyUserId, collectionId BookmarkParentKeyCollectionId, body BookmarksCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBookmarksCreateRequestWithBody(server, userId, collectionId, "application/json", bodyReader)
}

// NewBookmarksCreateRequestWithBody generates requests for BookmarksCreate with any type of body
func NewBookmarksCreateRequestWithBody(server string, userId BookmarkParentKeyUserId, collectionId BookmarkParentKeyCollectionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/collections/%s/bookmarks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BookmarksCreateWithBodyWithResponse request with any body
	BookmarksCreateWithBodyWithResponse(ctx context.Context, userId BookmarkParentKeyUserId, collectionId BookmarkParentKeyCollectionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BookmarksCreateResponse, error)

	BookmarksCreateWithResponse(ctx context.Context, userId BookmarkParentKeyUserId, collectionId BookmarkParentKeyCollectionId, body BookmarksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BookmarksCreateResponse, error)
}

type BookmarksCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bookmark
	JSON201      *Bookmark
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r BookmarksCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BookmarksCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BookmarksCreateWithBodyWithResponse request with arbitrary body returning *BookmarksCreateResponse
func (c *ClientWithResponses) BookmarksCreateWithBodyWithResponse(ctx context.Context, userId BookmarkParentKeyUserId, collectionId BookmarkParentKeyCollectionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BookmarksCreateResponse, error) {
	rsp, err := c.BookmarksCreateWithBody(ctx, userId, collectionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBookmarksCreateResponse(rsp)
}

func (c *ClientWithResponses) BookmarksCreateWithResponse(ctx context.Context, userId BookmarkParentKeyUserId, collectionId BookmarkParentKeyCollectionId, body BookmarksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BookmarksCreateResponse, error) {
	rsp, err := c.BookmarksCreate(ctx, userId, collectionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBookmarksCreateResponse(rsp)
}

// ParseBookmarksCreateResponse parses an HTTP response from a BookmarksCreateWithResponse call
func ParseBookmarksCreateResponse(rsp *http.Response) (*BookmarksCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BookmarksCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bookmark
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Bookmark
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
